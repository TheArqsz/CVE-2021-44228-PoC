package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.io.OutputStream;
import java.net.BindException;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;   

public class Main {

  private static final Logger logger  = LogManager.getLogger(Main.class);

  private static int port             = 8000;
  private static HttpServer server    = null;

  private static Map<String, String> queryToMap(String query) {
    if(query == null) {
        return null;
    }
    Map<String, String> result = new HashMap<>();
    for (String param : query.split("&")) {
        String[] entry = param.split("=");
        if (entry.length > 1) {
            result.put(entry[0], entry[1]);
        }else{
            result.put(entry[0], "");
        }
    }
    return result;
  }

  public static void main(String[] args) throws Exception {
    // Set this to true if you want exploit to work
    System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase","true");
    if(args.length != 1)
    {
      System.out.println("Starting webserver on default port " + port);
    } else {
      port = Integer.parseInt(args[0]);
      System.out.println("Starting webserver on port " + port);
    }
    try{
      server = HttpServer.create(new InetSocketAddress(port), 0);
    } catch (BindException e) {
      logger.error("Cannot start webserver");
      logger.error(e);
      System.exit(1);
    }
    server.createContext("/", new MyHandler());
    server.setExecutor(null);
    server.start();
  }

  static class MyHandler implements HttpHandler {
    @Override
    public void handle(HttpExchange httpExchange) throws IOException {
      String query = httpExchange.getRequestURI().getQuery();
      String name = "";
      String answer = "";
      if(query != null){
        Map<String, String> params = queryToMap(query); 
        for(String key: params.keySet()) {
          logger.error("Given parameter '" + key + "': " + params.get(key));
          if( key.equals("name") ){
            name = params.get("name");
          }
        }
      } else {
        query = "";
      }
      
      DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
      LocalDateTime now = LocalDateTime.now();  
      if(name.equals("")){
        answer = "<h3><pre>Give me your name!</pre></h3>\n";
      } else {
        answer = "<h3><pre>Good morning " + name + "!</pre></h3>\n";
      }
      String response = ""
        + "<html>\n"
        + "<head><title>Java Hello Server</title></head>\n"
        + "<body style='text-align:center;'>\n"
        + "<h1>Today is " + dtf.format(now) + "</h1><br>\n"
        + answer
        + "</body>\n"
        + "</html>";
      httpExchange.getResponseHeaders().set("Server", "Java 8 Webserver");
      httpExchange.getResponseHeaders().set("I'm Pickle!", "Pickle Riiick!");
      httpExchange.sendResponseHeaders(200, response.length());
      OutputStream os = httpExchange.getResponseBody();
      os.write(response.getBytes());
      os.close();
    }
  }

}